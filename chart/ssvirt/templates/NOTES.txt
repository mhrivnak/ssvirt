1. Get the application URL by running these commands:
{{- if .Values.route.enabled }}
  OpenShift Route:
  {{- if .Values.route.host }}
  {{- if .Values.route.tls.enabled }}
  https://{{ .Values.route.host }}{{ .Values.route.path }}
  {{- else }}
  http://{{ .Values.route.host }}{{ .Values.route.path }}
  {{- end }}
  {{- else }}
  The route hostname will be automatically generated by OpenShift.
  Get the route hostname with:
  
  oc get route {{ include "ssvirt.fullname" . }} -n {{ .Release.Namespace }} -o jsonpath='{.spec.host}'
  {{- end }}

{{- else if .Values.ingress.enabled }}
  Ingress:
  {{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
  {{- end }}

{{- else if contains "NodePort" .Values.apiServer.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "ssvirt.fullname" . }}-api-server)
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT

{{- else if contains "LoadBalancer" .Values.apiServer.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "ssvirt.fullname" . }}-api-server'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "ssvirt.fullname" . }}-api-server --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.apiServer.service.port }}

{{- else if contains "ClusterIP" .Values.apiServer.service.type }}
  kubectl -n {{ .Release.Namespace }} port-forward svc/{{ include "ssvirt.fullname" . }}-api-server 8080:{{ .Values.apiServer.service.targetPort }}
  echo "Visit http://127.0.0.1:8080 to use your application"
{{- end }}

2. API Endpoints:
   - Health Check: /healthz
   - Ready Check: /readyz
   - API Base: /api/

3. Database Configuration:
{{- if .Values.postgresql.enabled }}
   Using embedded PostgreSQL database.
   Database host: {{ .Release.Name }}-postgresql:5432
   Database name: {{ .Values.postgresql.auth.database }}
{{- else }}
   Using external database.
   {{- if .Values.externalDatabase.host }}
   Database host: {{ .Values.externalDatabase.host }}:{{ .Values.externalDatabase.port }}
   Database name: {{ .Values.externalDatabase.database }}
   {{- else }}
   ⚠️  External database configuration is incomplete. Please set externalDatabase values.
   {{- end }}
{{- end }}

4. Important Notes:
   {{- if not .Values.auth.jwtSecret }}
   ⚠️  JWT secret was auto-generated. For production deployments, set a fixed JWT secret.
   {{- end }}
   
   {{- if .Values.postgresql.enabled }}
   ⚠️  Using embedded PostgreSQL. For production, consider using an external database.
   {{- end }}
   
   - The organization controller manages Kubernetes namespaces based on organization lifecycle
   - API server provides VMware Cloud Director compatible API endpoints
   - OpenShift Virtualization is required for VM management functionality

5. Useful Commands:
   # View logs
   kubectl logs -n {{ .Release.Namespace }} deployment/{{ include "ssvirt.fullname" . }}-api-server
   kubectl logs -n {{ .Release.Namespace }} deployment/{{ include "ssvirt.fullname" . }}-controller
   
   # Check pod status
   kubectl get pods -n {{ .Release.Namespace }} -l app.kubernetes.io/instance={{ .Release.Name }}
   
   # View configuration
   kubectl get configmap {{ include "ssvirt.fullname" . }}-config -n {{ .Release.Namespace }} -o yaml